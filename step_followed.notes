Overall designed of bittorrent
will include following things
	different part - torrent, file, tracker, peer, algorithms
	threads - main thread, tracker, main peer thread(mostly main thread), each peer thread
made logger design - is logger thread safe - if many logger are writing to same file - YES
	logger -> file, torrent, tracker, peers
	handler -> file, console(for development purposes redirect file to console too)
	formatter -> file :- level name, name, file, funcName, line no, message, stackinfo/excpinfo
				console :- levelname, message(will be close for development purposes)

thread locking needed for :-
	torrent
		lock for each peer data - shared by tracker, main peer thread, that peer thread
		upload, download, left bytes
	tracker
	peers and main peers
		upspeed, downspeed, 4 state variable, pieces it have, requested pieces, requesting piece
	file
		lock for permission for getting each piece for download
		partially downloaded pieces will remain in RAM(NO) so lock for writing to that buffer
		lock for freq of each peer
		konta piece kontya peer kadhe ahe
		konta piece koth paryanta download jala ahe
		konta piece in request ahe ani kon karat ahe ani if downloading started(if started others must not request same piece)
		at a time request counter

functions of each thread :-
	tracker thread - what will happen to connection which are connected when the thread is not in .accept() function? will the connection gets rejected
		handle updating various data from trackers
		accept connection of peers on socket and pass it to main thread

whether single thread for each peer?
send handshake
recv handshake
see for hashinfo if match cont else drop connection
send bitfield message
recv bitfield message if not recv send unchoke and interested and recv again still not recv make some random request and recv still not recv drop connection
recv unchoke message
unpack bitfield request the rearest say 10 pieces(if less pieces available ask less) or if some pieces are in download ask them first
recv if no bits recv again send the request and recv again no response drop

when two thread handle each peer
main thread create two thread for peer first receiving second sending
sender send handshake(and set handshake requested) and wait for reciever to confirm it have receive handshake or it has decided to drop if drop return to main thread or see if receiver has requested to resend the handshake
reciver receive handshake(when sender has send the handshake) and see if communication should continue or if it doesnt receive handshake in time request sender to resend the handshake)
sender sends bitfield, unchoke and wait for receiver to get bitfields
reciever receives bitfields or request sender to send bitfields
if receiver receives bitfields do the rarest thing and see if it wants piece which the peer have and ask sender to send interested
receiver waits for unchoke and/or interested if not receive ask sender to resend interested if still not receive close threads and submit it to main thread
receiver request sender to send request of rarest pieces
sender sends request
receiver wait for receiving pieces


sender
        check quit bit
        send interested
        send unchock
        check chock
            whenever a chock is receive all request of block by this client is
            discarded by the peer and we have to start from new
        keep atleast x request in pipeline
            need to implement my_bitfield(reading from already downloaded file)
		implement the request queue between sender and receiver as a priority queue
			since it may happen that first a request is enqueue and then a chock
			is enqueue in such a case chock must be read first


----------------
what does rarest first algorithm means?
is it that we have to talk to each peer find what pieces do they have and find
rarest among them(ofcourse we have to randomly choose among rare(even if this algo is called rarest) pieces)
or
is it that we connect to peers according to some mechanism we have device and ask
the piece which we think(i.e. it is rare in local sense(local means wrt peers we are connected)) is the rarest
I think both of this are two extreme ends
our solution lies somewhere in between
randomly choose any 10 peers ask them for there bitfields calculate the rarest
and which peers have this rarest pieces(for this we need to keep track of which
peer have which piece according to piece(i.e. if we know the piece we should be
able to find out who all peers have them)) connect to them and ask the piece
now the bad part is we need to have the rarest finding code in both in peer and
in torrent class
one solution is to keep it only in torrent
now there is one more problem i.e we need to keep track of rechable pieces in torrent class

---------------------
priority levels of messages
choke, unchock, cancel
interested, not interested
have
bitfield
request
piece
keep-alive
